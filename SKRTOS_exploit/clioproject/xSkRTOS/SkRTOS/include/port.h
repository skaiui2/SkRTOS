#ifndef PORT_H
#define PORT_H

#include "task.h"
#include "error.h"
#include <stdint.h>

//to NVIC!
#define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
#define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
#define portNVIC_SYSTICK_ADDRESS                        0xe000e010

#define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
#define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
#define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )





//to functional that in port.c



#define Init_XPSR   0x01000000UL
#define ThumbFun_adderss                ( ( uint32_t ) 0xfffffffeUL )

#define LR_error      port_Error



#define contextTrig()                                 \
    {                                                  \
        portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;\
        __asm volatile ( "dsb" ::: "memory" );  \
        __asm volatile ( "isb" );   \
    }



void  Pcontext( void );



static void vPortRaiseBASEPRI( void ) __attribute__((always_inline));
static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
            (
            "	mov %0, %1												\n"\
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configShieldInterPriority ) : "memory"
            );
}

static void vPortSetBASEPRI( uint32_t ulNewMaskValue ) __attribute__((always_inline));
static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
            (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
            );
}




#define xSVCHandler SVC_Handler
#define xPendSVHandler PendSV_Handler

//void xPendSVHandler( void );



#define portMIN_INTERRUPT_PRIORITY            ( 255UL )
#define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 16UL )
#define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 24UL )

#define portNVIC_SHPR2_REG                    ( *( ( volatile uint32_t * ) 0xe000ed1c ) )
#define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )




/*The registers in the structure correspond to the placement
* of 16 register parameters from low addresses to high addresses
*/
Class(Stack_register)
{
    //automatic stacking
    uint32_t r4;
    uint32_t r5;
    uint32_t r6;
    uint32_t r7;
    uint32_t r8;
    uint32_t r9;
    uint32_t r10;
    uint32_t r11;

    //manual stacking
    uint32_t r0;
    uint32_t r1;
    uint32_t r2;
    uint32_t r3;
    uint32_t r12;
    uint32_t LR;
    uint32_t PC;
    uint32_t xPSR;
};


Class(Systick_struct)
{
     uint32_t CTRL;
     uint32_t LOAD;
     uint32_t VAL;
     uint32_t CALIB;
};


uint32_t * Init_Stack(  uint32_t * topStack,
                            TCB_struct **self,
                            Taskfunction function_t 
                            );

long xStartScheduler( void );
void contextSwitchTriger(void);
uint32_t xEnterCritical( void );
void xEixtCritical( uint32_t xReturn );
void xSystickHandler( void );





#endif